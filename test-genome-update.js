// Test script to verify genome update fix// This simulates the scenario where genome values should update for both teams// Mock DOM elementsconst mockElements = {};global.document = {    getElementById: (id) => mockElements[id] || { textContent: '', style: {} }};global.window = {    DEBUG_GENOME: false};// Mock evolution engineglobal.evolution = {    candidatePool: [        {            genome: [0.8, 0.6, 0.7, 0.5, 0.9, 0.4, 0.6, 0.7, 0.5],            fitness: 0.75,            generation: 1,            team: 'red',            battles: 5,            wins: 3,            id: 'red_test_1'        },        {            genome: [0.4, 0.8, 0.9, 0.7, 0.6, 0.8, 0.5, 0.3, 0.7],            fitness: 0.68,            generation: 1,            team: 'blue',            battles: 5,            wins: 2,            id: 'blue_test_1'        }    ]};// Load the main.js file to get the functionsconst fs = require('fs');const mainContent = fs.readFileSync('./main.js', 'utf8');// Extract the getBestGenomeForTeam functionconst functionMatch = mainContent.match(/function getBestGenomeForTeam\(team\)[\s\S]*?(?=function [a-zA-Z]|$)/);if (!functionMatch) {    process.exit(1);}// Extract the genomeCache definitionconst cacheMatch = mainContent.match(/const genomeCache = \{[\s\S]*?\};/);if (!cacheMatch) {    process.exit(1);}+ '...');+ '...');// Evaluate the cache definition and functionseval(cacheMatch[0]);eval(functionMatch[0]);// Test 1: Initial state - both teams should return their respective best genomesconst redBest1 = getBestGenomeForTeam('red');const blueBest1 = getBestGenomeForTeam('blue');// Test 2: Simulate fitness update (this was the issue - fitness changes without pool size change)evolution.candidatePool[0].fitness = 0.85;evolution.candidatePool[0].wins = 4;evolution.candidatePool[0].battles = 6;const redBest2 = getBestGenomeForTeam('red');const blueBest2 = getBestGenomeForTeam('blue');// Test 3: Simulate Blue team fitness updateevolution.candidatePool[1].fitness = 0.78;evolution.candidatePool[1].wins = 3;evolution.candidatePool[1].battles = 6;const redBest3 = getBestGenomeForTeam('red');const blueBest3 = getBestGenomeForTeam('blue');// Test 4: Verify cache is working but updates properly// Test 5: Add a small delay and test again (cache should be valid for same data)const redBest4 = getBestGenomeForTeam('red');const blueBest4 = getBestGenomeForTeam('blue');// Verify the fix worksconst fixWorking = redBest3?.fitness === 0.85 && blueBest3?.fitness === 0.78;if (fixWorking) {} else {}