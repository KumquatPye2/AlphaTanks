// Simplified test to verify genome update behavior// Simulate the scenario that was causing the issuelet mockPool = [    {        genome: [0.8, 0.6, 0.7, 0.5, 0.9, 0.4, 0.6, 0.7, 0.5],        fitness: 0.75,        team: 'red',        battles: 5,        wins: 3    },    {        genome: [0.4, 0.8, 0.9, 0.7, 0.6, 0.8, 0.5, 0.3, 0.7],        fitness: 0.68,        team: 'blue',        battles: 5,        wins: 2    }];// Simulate the old cache behavior (the problem)let oldCache = {    lastPoolSize: 2,    lastCacheTime: Date.now() - 1000, // 1 second ago    redBest: mockPool[0],    blueBest: mockPool[1]};// Simulate the new cache behavior (the fix)function calculatePoolChecksum(pool) {    return pool.reduce((sum, candidate, index) => {        const fitness = candidate.fitness || 0;        const battles = candidate.battles || 0;        const wins = candidate.wins || 0;        return sum + (fitness * 1000 + battles * 100 + wins * 10) * (index + 1);    }, 0);}let newCache = {    lastPoolSize: 2,    lastPoolChecksum: calculatePoolChecksum(mockPool),    lastCacheTime: Date.now() - 1000,    redBest: mockPool[0],    blueBest: mockPool[1]};// Simulate a battle result that updates fitness without changing pool sizemockPool[0].fitness = 0.85;  // Red improvesmockPool[0].wins = 4;mockPool[0].battles = 6;mockPool[1].battles = 6;     // Blue gets battle experience but no winconst newChecksum = calculatePoolChecksum(mockPool);');');');// Test old cache behavior (would miss the update)const oldCacheValid = (    mockPool.length === oldCache.lastPoolSize &&     Date.now() - oldCache.lastCacheTime < 5000);// Test new cache behavior (would detect the update)const newCacheValid = (    mockPool.length === newCache.lastPoolSize &&     newChecksum === newCache.lastPoolChecksum &&    Date.now() - newCache.lastCacheTime < 5000);if (oldCacheValid && !newCacheValid) {} else if (!oldCacheValid && !newCacheValid) {} else {}// Test another scenario: Blue team wins next battlemockPool[1].fitness = 0.78;  // Blue improvesmockPool[1].wins = 3;mockPool[1].battles = 7;mockPool[0].battles = 7;     // Red gets battle experience but no winconst finalChecksum = calculatePoolChecksum(mockPool);');