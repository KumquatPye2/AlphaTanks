// Test script for early battle termination feature// This script tests that battles can end early when all tanks of one or both colors are destroyed// Mock the necessary globalsglobal.window = {    dispatchEvent: function(event) {    }};// Import the Tank class first, then the game engineconst fs = require('fs');const tankCode = fs.readFileSync('tank-ai.js', 'utf8');const gameEngineCode = fs.readFileSync('game-engine.js', 'utf8');// Create a test canvas element mockconst mockCanvas = {    getContext: () => ({        fillStyle: '',        font: '',        fillText: () => {},        fillRect: () => {},        strokeStyle: '',        lineWidth: 0,        strokeRect: () => {},        clearRect: () => {},        save: () => {},        restore: () => {},        translate: () => {},        rotate: () => {},        beginPath: () => {},        moveTo: () => {},        lineTo: () => {},        stroke: () => {},        setLineDash: () => {}    }),    width: 800,    height: 600};// Mock document.getElementByIdglobal.document = {    getElementById: (id) => {        if (id === 'gameCanvas') {            return mockCanvas;        }        return null;    }};// Extract and evaluate the Tank class firsteval(tankCode);// Extract and evaluate the GameEngine classeval(gameEngineCode);// Test 1: Normal win condition (red team eliminated)const game1 = new GameEngine('gameCanvas');// Mock teams with some tanks deadgame1.redTeam = [    { isAlive: false },    { isAlive: false }];game1.blueTeam = [    { isAlive: true },    { isAlive: true }];game1.battleStarted = true;game1.battleTime = 5; // Less than minimum time, but should still endgame1.gameState = 'running';game1.checkWinConditions();// Test 2: Blue team eliminated (red team wins)const game2 = new GameEngine('gameCanvas');game2.redTeam = [    { isAlive: true },    { isAlive: true }];game2.blueTeam = [    { isAlive: false },    { isAlive: false }];game2.battleStarted = true;game2.battleTime = 8; // Less than minimum time, but should still endgame2.gameState = 'running';game2.checkWinConditions();// Test 3: Both teams eliminated (draw)const game3 = new GameEngine('gameCanvas');game3.redTeam = [    { isAlive: false },    { isAlive: false }];game3.blueTeam = [    { isAlive: false },    { isAlive: false }];game3.battleStarted = true;game3.battleTime = 3; // Very short battlegame3.gameState = 'running';game3.checkWinConditions();// Test 4: Timeout scenario (should still respect minimum time)const game4 = new GameEngine('gameCanvas');game4.redTeam = [    { isAlive: true },    { isAlive: true }];game4.blueTeam = [    { isAlive: true },    { isAlive: true }];game4.battleStarted = true;game4.battleTime = 5; // Less than minimum timegame4.gameState = 'running';game4.endBattle('timeout');// Test 5: Timeout after minimum timeconst game5 = new GameEngine('gameCanvas');game5.redTeam = [    { isAlive: true },    { isAlive: true }];game5.blueTeam = [    { isAlive: true },    { isAlive: true }];game5.battleStarted = true;game5.battleTime = 20; // More than minimum timegame5.gameState = 'running';game5.endBattle('timeout');